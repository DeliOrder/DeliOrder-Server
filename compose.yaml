# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

name: DeliOrder

services:
  server:
    build:
      context: .
      target: dev
    image: deliorder-server:latest
    env_file:
      - .env
    environment:
      NODE_ENV: "production"
      CLIENT_PORT: ${CLIENT_PORT}
      DATABASE_URL: ${DATABASE_URL}
      KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
      KAKAO_ADMIN_KEY: ${KAKAO_ADMIN_KEY}
      PORT: ${PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_PRIVATE_KEY_ID: ${FIREBASE_PRIVATE_KEY_ID}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      FIREBASE_CLIENT_ID: ${FIREBASE_CLIENT_ID}
    ports:
      - 8080:8080
      - 9229:9229
    volumes:
      - ./dist:/usr/src/app/dist
      - ./coverage:/usr/src/app/coverage
    user: "node"
    depends_on:
      - db

  db:
    container_name: mongodb
    image: mongodb/mongodb-community-server:7.0.7-ubi8
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${DOCKER_MONGODB_PASSWORD}
    ports:
      - "27017:27017"
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

